Alles met 8 envs, waarbij de bot erin past en met de lengtes en dikte van de setup. 
Met hippe init functie. verhouding in de naam.
Deze runs hadden de krappe pijpen. de pijp naar rechts gaf de meeste problemen en had width = 60.

run3novSetupLinit3434G98
run3novSetupLinit3434G99
run3novSetupLinit3434G993
run3novSetupLinit3434G995

run3novSetupLinit5050G98
run3novSetupLinit5050G99
run3novSetupLinit5050G93
run3novSetupLinit5050G95

Deze const file is gebruikt:

# -*- coding: utf-8 -*-
"""
Created on Tue Oct 23 12:28:34 2018

@author: arnol
"""

import numpy as np

ENV_IS_RARM = True

# PARS FOR EVALUATION ONLY
EVAL_MODE = True
EVAL_RENDER = True # only relevant ruing evaluation episodes
EVAL_SHOW_NORMAL_SPEED = True # only relevant during evaluation episodes
EVAL_FPS = 240 # only relevant during evalutation episodes
#EVAL_CPU_CNT = 12 # Number of cpu's used during training
EVAL_FOLDER = 'run3novSetupLinit5050G99' # The folder that holds the model and train folders
# deze heb je nodig om iets te evalueren in een compleet andere map
#EVAL_HIGHLEVEL_FOLDER = './LogsOfRuns/TempTransferCluster29okt'
#tussen = EVAL_HIGHLEVEL_FOLDER + '/' + EVAL_FOLDER
#EVAL_MODEL_PATH = tussen + "/model"
EVAL_NR_OF_GAMES = 100
# ===================================================================
# PARS FOR ANGLE/BODY TEST MODE (only works if EVAL_MODE = FALSE !!!)
TEST_MODE = True
TEST_fromTestConsts = True
TEST_U_INPUT = True
#TEST_rob_ResetAngles = np.radians(np.array([130,-92,100])) # This is oriented for going left
TEST_rob_ResetAngles = np.radians(np.array([135,-135,135])) # This is oriented for going left
# Not yet used
#TEST_rob_ResetAngles_Left = np.radians(np.array([130,-92,100])) # This is oriented for going left
#TEST_rob_ResetAngles_Right = np.radians(np.array([50,81,-90])) # this is oriented for going right.


sim_WINDOW_WIDTH = 400
sim_WINDOW_HEIGHT = 400

sim_RandomGoal = True
sim_SparseRewards = False
sim_Goal = np.array([100,200])
sim_AddNoise = True
sim_goalRadius = 5
sim_GoalReward = 100.
sim_expRewardGamma = -0.01
sim_expRewardOffset = 100
sim_thresholdWall = 10. # linear punishmet starts at this amount of pixels
sim_WallReward = 100
sim_Y_threshold_goal = 280 
# the normalisation is dependend on whether sparse rewards are used
if sim_SparseRewards:
    # the higest reward must be 1, this ensures that is true.
    sim_rewardNormalisation = max(sim_GoalReward,sim_WallReward)
else: # in case no sparse rewards
    sim_rewardNormalisation = sim_WallReward + sim_expRewardOffset
print("GlobalCOnst ",sim_rewardNormalisation)


rob_RandomInit = True
rob_RandomWalls = True
rob_UseSetupBody = True
rob_NoiseStandDev = 0.001
rob_StepSize = np.radians(1.4)
rob_MaxJointAngle = np.radians(np.array([170,-170]))
if rob_UseSetupBody:
    bodyFactor = 0.9 # used to make the body verhoudingen match our envs.
    rob_JointLenght = bodyFactor*np.array([71,112,141*0.6,141*0.4]) #[100,100,80,20] #100,100,80,20
    rob_JointLenght = rob_JointLenght.astype(int)
    rob_JointWidth = int(bodyFactor*30) # 30 mm wide
else: # this is for the old thin body
    rob_JointLenght = np.array([100,100,80,20]) # this is the original thin body
    rob_JointWidth = 10
#rob_ResetAngles = np.radians(np.array([100,-10,90])) # dont know this one
#rob_ResetAngles = np.radians(np.array([65,115,-115])) # This is the one to the right. 
rob_ResetAngles = np.radians(np.array([115,-95,115])) # this is used with randomWalls = True in 31 okt runs
#rob_ResetAngles = np.radians(np.array([130,-140,140])) # this was used during the 29okt runs
rob_resetAngles_Lchance = 0.5 # the chance of having a left oriented init
rob_resetAngles_Rchance = 0.5 # the chance of having a right oriented init
rob_ResetAngles_Left = np.radians(np.array([130,-92,100])) # This is oriented for going left
rob_ResetAngles_Right = np.radians(np.array([50,81,-90])) # this is oriented for going right.



        

run_Render = False
run_NumOfWorkers = 12
run_MaxEpisodeLenght = 2000
run_FPS = 15
run_Gamma = .98 # discount rate for advantage estimation and reward discounting
run_sSize = 17 # Observations are greyscale frames of 84 * 84 * 1
run_aSize = 6 # Agent can rotate each joint in 2 directions
run_LoadModel = False
run_LearningRate = 1e-3
run_epsilon = 0.1
run_decay = 0.99
run_BufferSize = 30
run_actionSpace = [1,2,3,4,5,6]
run_TFsummIntrvl = 5 # after this many episodes a datapoint is saved
run_TFmodelSaveIntrvl = 100 # after this many episodes the model is saved.

# Pars used in NETWORK
netw_nHidNodes = 128
netw_vfCoef = 0.5 # Was originally at 0.5, openAI also had 0.5
netw_entCoef = 0.1 # Was at 0.1 originally, openAI has 0.01 as default in A2C
netw_maxGradNorm = 40 # was originally 40 and openAI has 0.5 in A2C


OUTP_FOLDER = '/runLocal31oktNachtG98'

OUTP_FOLDER = './LogsOfRuns' + OUTP_FOLDER
TF_SUMM_PATH = OUTP_FOLDER + '/train_'
run_ModelPath = OUTP_FOLDER + '/model'


-------------------------------------------------------------------

Deze envs zijn gebruikt:

   def setRandomEnv(self):
        # get the random envNr
        rC = 200 # robotCenter, the x pos of the arm bottom
        envNr = np.random.randint(1, 8 + 1)
        #envNr =8
        # Switch between environments per reset of the environment.
        # This is a pipe witch a corner to the left (most used during training. Our first env.)
        if envNr == 1:
            self.envWalls = np.array([[(120,400), (120,300)], [(120,300), (40,300)], [(40,300),
                      (40,140)], [(40,140), (280,140)], [(280,140), (280,400)], [(280,400),(120,400)]])
            self.envWallSide = ['l', 'b','l', 't', 'r', 'b']
        # A pipe witch is straight up and wide
        elif envNr == 2:
            pR = 80 # the width of the pipe
            self.envWalls = np.array([[(rC-pR,400), (rC-pR,100)], [(rC-pR,100), (rC+pR,100)], [(rC+pR,100),
                      (rC+pR,400)], [(rC+pR,400), (rC-pR,400)]])
            self.envWallSide = ['l', 't','r', 'b']
        # A pipe witch is straight up and narrower
        elif envNr == 3:
            pR = 70 # the width of the pipe
            self.envWalls = np.array([[(rC-pR,400), (rC-pR,100)], [(rC-pR,100), (rC+pR,100)], [(rC+pR,100),
                      (rC+pR,400)], [(rC+pR,400), (rC-pR,400)]])
            self.envWallSide = ['l', 't','r', 'b']
        # this is a T shaped pipe
        elif envNr == 4:
            pR = 72 # the width of the pipe
            tYe = 130
            self.envWalls = np.array([[(rC-pR,400), (rC-pR,300)], [(rC-pR,300), (45,300)], [(45,300),
                      (45,tYe)], [(45,tYe), (355,tYe)], [(355,tYe), (355,300)], [(355,300),(rC+pR,300)],[(rC+pR,300),(rC+pR,400)],[(rC+pR,400),(rC-pR,400)]])
            self.envWallSide = ['l', 'b','l', 't', 'r', 'b','r','b']#
        #
        # this is a turn to the right Which is at the top of the reach of the arm
        elif envNr == 5:
            tYs = 250 # rurnYstart This is the start of the right side of the pipe
            tYe = 130 #turn Y end, the top op the pipe
            pR = 70 # the width of the pipe
            self.envWalls = np.array([[(rC-pR,400), (rC-pR,tYe)], [(rC-pR,tYe), (355,tYe)], [(355,tYe),
                      (355,tYs)], [(355,tYs),(rC+pR,tYs)],[(rC+pR,tYs),(rC+pR,400)],[(rC+pR,400),(rC-pR,400)]])
            self.envWallSide = ['l', 't','r', 'b', 'r', 'b']
        # this is a turn to the right which is high but not that high
        elif envNr == 6:
            tYs = 270 # rurnYstart This is the start of the right side
            tYe = 110 #turn Y end, the top of the pipe
            pR = 73 # the width of the pipe
            self.envWalls = np.array([[(rC-pR,400), (rC-pR,tYe)], [(rC-pR,tYe), (355,tYe)], [(355,tYe),
                      (355,tYs)], [(355,tYs),(rC+pR,tYs)],[(rC+pR,tYs),(rC+pR,400)],[(rC+pR,400),(rC-pR,400)]])
            self.envWallSide = ['l', 't','r', 'b', 'r', 'b']
            # This is a turn to the right which is the same as the original pipe to the left
        elif envNr == 7:
            tYs = 300 # rurnYstart This is the start of the right side
            tYe = 140 #turn Y end, the top op the pipe
            self.envWalls = np.array([[(140,400), (140,tYe)], [(140,tYe), (355,tYe)], [(355,tYe),
                      (355,tYs)], [(355,tYs),(260,tYs)],[(260,tYs),(260,400)],[(260,400),(140,400)]])
            self.envWallSide = ['l', 't','r', 'b', 'r', 'b']
        # This environment is to move freely. TODO, get rid of maxY handicap
        elif envNr == 8:
            tYe = 30 #turn Y end, the top op the pipe
            x1 = 30
            x2 = 400 - x1
            self.envWalls = np.array([[(x1,400), (x1,tYe)], [(x1,tYe), (x2,tYe)], [(x2,tYe),
                      (x2,400)], [(x2,400),(x1,400)]])
            self.envWallSide = ['l', 't','r', 'b']
        else:
            raise NameError('envNr was out of range, no such environment defined')

        self.envPoints = self.wallsTOPoints(self.envWalls)

        return
